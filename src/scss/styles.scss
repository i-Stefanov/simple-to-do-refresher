:root {
  --clr-primary: rgb(54, 112, 199);
  --clr-light: rgb(244, 244, 244);
  --clr-dark: rgb(51, 51, 51);
  --clr-warning: rgb(204, 115, 32);
}

*,
*::before,
*::after {
  font-family: inherit;
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: "Work sans", sans-serif;
  font-weight: 300;
  font-size: 1.5rem;
  background-color: var(--clr-primary);
  color: var(--clr-light);
  display: grid;

  grid:
    "header header header header" auto
    ". lists active ." auto /
    1fr minmax(200px, 300px) minmax(250px, 500px) 1fr;
}

.title {
  grid-area: header;
  text-align: center;
  margin-top: -2rem;
  margin-bottom: 2rem;
  font-size: calc(7vw + 2rem);
  font-weight: 700;
  color: rgba(0, 0, 0, 0.1);
}

.all-tasks {
  grid-area: lists;
}

.task-list {
  line-height: 1.7;
  font-size: 1.2rem;
  list-style: circle;
  padding-left: 1.1em;
}

.list-name {
  cursor: pointer;
  transition: all 0.15s ease-out;
}

.list-name:hover {
  opacity: 0.7;
}

form {
  display: flex;
}

.btn {
  cursor: pointer;
  background: 0;
  border: 0;
  padding: 0;
  color: inherit;
}

.btn.create {
  font-size: 1.5rem;
  font-weight: 700;
  margin-right: 0.25em;
  transition: all 0.1s ease-in;
}

.btn.create:hover {
  opacity: 0.7;
}

.btn.delete {
  opacity: 0.7;
  font-size: 1rem;
  transition: all 100ms ease-in;
}

.btn.delete:hover {
  opacity: 1;
  color: var(--clr-warning);
}

.new {
  background: transparent;
  border: none;
  color: inherit;
  border-bottom: 1px solid currentColor;
  font-size: inherit;
  padding: 0.25em;
  outline: none;
  order: 2;
  transition: all 0.15s ease-in;
}

.new.list {
  font-size: 1.1rem;
}
.new.task {
  margin-bottom: 0;
}

.new:focus {
  border-bottom-width: 2px;
}

.new::placeholder {
  color: inherit;
  opacity: 0.5;
  letter-spacing: 1px;
}
.new:focus::placeholder {
  opacity: 0.3;
}

.active-list {
  font-weight: 700;
}

.todo-list {
  --spacer: 2rem;
  grid-area: active;
  background: var(--clr-light);
  color: var(--clr-dark);
}

.todo-header {
  background: #e4e4e4;
  padding: var(--spacer);
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.list-title {
  margin: 0 1em 0 0;
}

.task-count {
  margin: 0;
  font-size: 1rem;
}

.todo-body {
  padding: var(--spacer);
  position: relative;
  button.create {
    color: var(--clr-primary);
  }
  .new.task::placeholder {
    font-size: 0.9em;
  }
}

[type="checkbox"] {
  opacity: 0;
  position: absolute;
}

.task label {
  display: inline-flex;
  align-items: center;
  position: relative;
}

.task::after {
  content: "";
  position: absolute;
  right: 0;
  left: 0;
  bottom: -0.5em;
  height: 1px;
  background: currentColor;
  opacity: 0.1;
}
.task {
  position: relative;
  margin-bottom: 1em;
}

.custom-checkbox {
  --size: 0.75em;
  display: inline-block;
  margin-right: var(--size);
  width: var(--size);
  height: var(--size);
  cursor: pointer;
  border: 3px solid currentColor;
  border-radius: 50%;
  transform: scale(1);
  transition: all 0.15s ease-in-out;
}

.task:hover .custom-checkbox,
[type="checkbox"]:focus + label .custom-checkbox {
  transform: scale(1.1);
  color: var(--clr-primary);
}

[type="checkbox"]:checked + label .custom-checkbox {
  background: var(--clr-primary);
  border-color: var(--clr-primary);
  box-shadow: inset 0 0 0 3px white;
}

[type="checkbox"]:checked + label {
  opacity: 0.5;
}

.task label::after {
  content: "";
  position: absolute;
  left: 1.3em;
  right: 0;
  height: 3px;
  background: currentColor;
  transform: scaleX(0);
  transform-origin: right;
  transition: transform 0.15s ease-in-out;
}
[type="checkbox"]:checked + label::after {
  transform: scaleX(1);
  transform-origin: left;
}

.delete-stuff {
  display: flex;
  justify-content: space-evenly;
  position: absolute;
  width: 100%;
  left: 0;
  bottom: -35px;
  color: var(--clr-light);
}

.empty-state {
  text-align: center;
  font-style: italic;
  color: #999;
  margin-top: 1rem;
  font-size: 0.9rem;
}

#no-lists-message {
  @extend .empty-state;
  opacity: 0;
  visibility: hidden;
  max-height: 0;
  transition: opacity 0.3s ease, visibility 0.3s ease, max-height 0.3s ease;

  &.visible {
    opacity: 1;
    visibility: visible;
    max-height: 50px; // adjust as needed
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.fade-in-up {
  animation: fadeInUp 0.3s ease-out;
}
